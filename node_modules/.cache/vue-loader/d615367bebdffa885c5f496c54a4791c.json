{"remainingRequest":"/Projetos/meutempo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Projetos/meutempo/src/views/Dashboard.vue?vue&type=style&index=0&lang=stylus&","dependencies":[{"path":"/Projetos/meutempo/src/views/Dashboard.vue","mtime":1569458605395},{"path":"/Projetos/meutempo/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Projetos/meutempo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Projetos/meutempo/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Projetos/meutempo/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/Projetos/meutempo/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Projetos/meutempo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Projetos/meutempo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import '~@/assets/stylus/dashboard.styl';\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwNA","file":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <v-container grid-list-lg>\n      <v-layout row wrap>\n        <v-flex xs12>\n          <v-form\n            class=\"form-city\"\n            ref=\"formCity\"\n            v-model=\"valid\"\n            :lazy-validation=\"lazy\"\n            @submit.prevent\n          >\n            <v-container grid-list-md>\n              <v-layout row wrap justify-space-between>\n                <v-flex class=\"box-city\" xs12 sm12 md10>\n                  <v-text-field\n                    v-model=\"currentCity\"\n                    label=\"Search weather of (city) ...\"\n                    :rules=\"[v => !!v || 'City is required']\"\n                    required\n                    outlined\n                    @keyup.13=\"search\"\n                  ></v-text-field>\n                </v-flex>\n                <v-flex class=\"box-btn\" xs12 sm12 md2>\n                  <v-btn\n                    :loading=\"isWaiting\"\n                    :disabled=\"!valid\"\n                    :block=\"true\"\n                    color=\"success\"\n                    class=\"mr-4\"\n                    height=\"56\"\n                    @click=\"search\"\n                  >Search</v-btn>\n                </v-flex>\n              </v-layout>\n            </v-container>\n          </v-form>\n        </v-flex>\n        <v-flex xs12>\n          <v-container grid-list-md>\n            <div class=\"results\" v-if=\"hasResults && !isWaiting\">\n              <v-layout row wrap>\n                <v-flex xs12 sm6 md3>\n                  <CityDayInfo />\n                </v-flex>\n                <v-flex xs12 sm6 md9>\n                  <CityGraph :labels=\"labels\" :max_temps=\"max_temps\" :min_temps=\"min_temps\" />\n                </v-flex>\n              </v-layout>\n              <v-layout row wrap>\n                <v-flex xs12>\n                  <CityReviews :city-history=\"cityHistory\" />\n                </v-flex>\n                <v-flex xs12>\n                  <CityNextDays :nextDays=\"nextDays\" />\n                </v-flex>\n              </v-layout>\n            </div>\n          </v-container>\n        </v-flex>\n      </v-layout>\n    </v-container>\n\n    <!-- Message from the bottom -->\n    <Snackbar :color=\"color\" :timeout=\"timeout\" :text=\"text\" />\n  </div>\n</template>\n\n<script>\nimport { mapActions } from \"vuex\";\nimport Snackbar from \"@/components/UI/Snackbar\";\nimport CityDayInfo from \"@/components/city/CityDayInfo\";\nimport CityGraph from \"@/components/city/CityGraph\";\nimport CityNextDays from \"@/components/city/CityNextDays\";\nimport CityReviews from \"@/components/city/CityReviews\";\n\nexport default {\n  name: \"dashboard\",\n  components: {\n    CityDayInfo,\n    CityGraph,\n    CityNextDays,\n    CityReviews,\n    Snackbar\n  },\n  data: () => ({\n    hasResults: false,\n    isWaiting: false,\n    valid: true,\n    lazy: false,\n    currentCity: \"\",\n    text: \"\",\n    color: \"\",\n    timeout: 4000,\n    labels: [],\n    min_temps: [],\n    max_temps: [],\n    nextDays: [],\n    cityHistory: []\n  }),\n  methods: {\n    ...mapActions([\"setCityInfo\", \"setOpenSnackbar\"]),\n    getLS(label) {\n      let ls = window.localStorage.getItem(label);\n      if (ls) {\n        return JSON.parse(ls);\n      }\n      return false;\n    },\n    setLS(label, data) {\n      window.localStorage.setItem(label, JSON.stringify(data));\n    },\n    async search() {\n      this.isWaiting = true;\n      this.hasResults = false;\n      try {\n        if (this.$refs.formCity.validate()) {\n          const response = await this.getCityWoeid();\n          if (response !== undefined) {\n            let { woeid } = response;\n            await this.getCityDayInfo(woeid);\n            await this.getCityLastDays(woeid);\n            this.hasResults = true;\n          } else {\n            this.text = \"City not found.\";\n            this.color = \"info\";\n            this.setOpenSnackbar(true);\n          }\n        }\n        this.isWaiting = false;\n      } catch (error) {\n        this.text =\n          \"Something went wrong. Try again, if the problem persist contact the admin.\";\n        this.color = \"error\";\n        this.setOpenSnackbar(true);\n        this.isWaiting = false;\n        console.log(error);\n      }\n    },\n    async getCityWoeid() {\n      let city = this.currentCity;\n      const { data } = await this.$axios.get(`/location/search/?query=${city}`);\n      return data[0];\n    },\n    async getCityDayInfo(woeid) {\n      let ls_day_info = this.getLS(`day_info_${woeid}`);\n      let result = null;\n      if (ls_day_info) {\n        result = ls_day_info;\n      } else {\n        const { data } = await this.$axios.get(`/location/${woeid}/`);\n        result = data;\n        this.setLS(`day_info_${woeid}`, result);\n      }\n      const { time, title, consolidated_weather } = result;\n      const {\n        the_temp,\n        weather_state_name,\n        max_temp,\n        min_temp,\n        wind_speed,\n        humidity\n      } = consolidated_weather[0];\n      this.setCityInfo({\n        title,\n        time,\n        weather_state_name,\n        the_temp,\n        max_temp,\n        min_temp,\n        humidity,\n        wind_speed\n      });\n      this.nextDays = consolidated_weather;\n      return result;\n    },\n    async getCityLastDays(woeid) {\n      let [month, day, year] = new Date().toLocaleDateString().split(\"/\"); // example: 9/25/2019\n      let ls_last_days = this.getLS(`last_days_${woeid}`);\n      let result = null;\n      if (ls_last_days) {\n        result = ls_last_days;\n      } else {\n        const { data } = await this.$axios.get(\n          `/location/${woeid}/${year}/${month}/${day}/`\n        );\n        result = data;\n        this.setLS(`last_days_${woeid}`, result);\n      }\n      this.cityHistory = result;\n      this.labels = result\n        .sort((a, b) =>\n          new Date(a.created).getTime() > new Date(b.created).getTime() ? 1 : -1\n        )\n        .map(v =>\n          this.$moment(new Date(v.created).getTime()).format(\"DD/MM/YYYY HH:mm\")\n        );\n      this.max_temps = result\n        .sort((a, b) =>\n          new Date(a.created).getTime() > new Date(b.created).getTime() ? 1 : -1\n        )\n        .map(v => Number(v.max_temp).toFixed(0));\n      this.min_temps = result\n        .sort((a, b) =>\n          new Date(a.created).getTime() > new Date(b.created).getTime() ? 1 : -1\n        )\n        .map(v => Number(v.min_temp).toFixed(0));\n      console.log(\"data\", result);\n      return result;\n    }\n  }\n};\n</script>\n\n<style lang=\"stylus\">\n@import '~@/assets/stylus/dashboard.styl';\n</style>"]}]}